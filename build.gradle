import org.apache.tools.ant.filters.ReplaceTokens
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id 'eclipse'
    id 'com.github.johnrengelman.shadow' version '5.0.0'
}

allprojects {
	
	//Both set in gradle.properties
	version = pluginVersion
	group = pluginGroup
	
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	
	repositories {
		mavenCentral()
    	jcenter()
    
	    //Spigot
    	maven { url "https://hub.spigotmc.org/nexus/content/repositories/snapshots" }
	
		//Sonatype, required for the Bungee API, which comes with Spigot
		maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
	}
	
	processResources {
        from(sourceSets.main.resources.srcDirs) {
            filter ReplaceTokens, tokens: [version: version]
        }
    }
}

dependencies {

	//Spigot API
	compileOnly 'org.spigotmc:spigot-api:1.16.1-R0.1-SNAPSHOT'

	//JDA, for hooking into Discord
	implementation ('net.dv8tion:JDA:4.2.0_168') {
		exclude module: 'opus-java' 
	}
	
	//Log4J, to get the console output from Bukkit
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.3'
	
	//emoji library to strip messages of their emotes /s
	compile group: 'com.vdurmont', name: 'emoji-java', version: '5.1.1'
	

}

//Used in both releaseJar and testJar, so added a common task
shadowJar {
	
	relocate 'net.dv8tion', 'nl.thedutchmc.libs.dv8tion'
	//relocate 'org.slf4j', 'nl.thedutchmc.libs.slf4j'
	//relocate 'org.apache.logging.log4j', 'nl.thedutchmc.libs.log4j'
	classifier 'DEV'
	destinationDir = file("$rootDir/server/plugins")
	
}

shadowJar.dependsOn(build)

//NOT WORKING AS OF NOW
//Task for releasing a build, will export to the releases directory
task releaseJar(type: ShadowJar) {
	description 'Build a release jar'
	
	classifier 'RELEASE'
	
	destinationDir = file("$rootDir/releases")
	
}

releaseJar.dependsOn(shadowJar)

//NOT WORKING AS OF NOW
//Task for testing a jar, will export to the plugins directory
task testJar(type: ShadowJar) {
	description 'Build a test jar, and put it into the plugins directory'
	
	classifier 'DEV'
	
	doLast {
		shadowJar
	}
}